// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"service-discovery-controller/mbus"
	"sync"
)

type AddressTable struct {
	AddStub        func(infraNames []string, ip string)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		infraNames []string
		ip         string
	}
	RemoveStub        func(infraNames []string, ip string)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		infraNames []string
		ip         string
	}
	PausePruningStub         func()
	pausePruningMutex        sync.RWMutex
	pausePruningArgsForCall  []struct{}
	ResumePruningStub        func()
	resumePruningMutex       sync.RWMutex
	resumePruningArgsForCall []struct{}
	SetWarmStub              func()
	setWarmMutex             sync.RWMutex
	setWarmArgsForCall       []struct{}
	invocations              map[string][][]interface{}
	invocationsMutex         sync.RWMutex
}

func (fake *AddressTable) Add(infraNames []string, ip string) {
	var infraNamesCopy []string
	if infraNames != nil {
		infraNamesCopy = make([]string, len(infraNames))
		copy(infraNamesCopy, infraNames)
	}
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		infraNames []string
		ip         string
	}{infraNamesCopy, ip})
	fake.recordInvocation("Add", []interface{}{infraNamesCopy, ip})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(infraNames, ip)
	}
}

func (fake *AddressTable) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *AddressTable) AddArgsForCall(i int) ([]string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].infraNames, fake.addArgsForCall[i].ip
}

func (fake *AddressTable) Remove(infraNames []string, ip string) {
	var infraNamesCopy []string
	if infraNames != nil {
		infraNamesCopy = make([]string, len(infraNames))
		copy(infraNamesCopy, infraNames)
	}
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		infraNames []string
		ip         string
	}{infraNamesCopy, ip})
	fake.recordInvocation("Remove", []interface{}{infraNamesCopy, ip})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		fake.RemoveStub(infraNames, ip)
	}
}

func (fake *AddressTable) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *AddressTable) RemoveArgsForCall(i int) ([]string, string) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].infraNames, fake.removeArgsForCall[i].ip
}

func (fake *AddressTable) PausePruning() {
	fake.pausePruningMutex.Lock()
	fake.pausePruningArgsForCall = append(fake.pausePruningArgsForCall, struct{}{})
	fake.recordInvocation("PausePruning", []interface{}{})
	fake.pausePruningMutex.Unlock()
	if fake.PausePruningStub != nil {
		fake.PausePruningStub()
	}
}

func (fake *AddressTable) PausePruningCallCount() int {
	fake.pausePruningMutex.RLock()
	defer fake.pausePruningMutex.RUnlock()
	return len(fake.pausePruningArgsForCall)
}

func (fake *AddressTable) ResumePruning() {
	fake.resumePruningMutex.Lock()
	fake.resumePruningArgsForCall = append(fake.resumePruningArgsForCall, struct{}{})
	fake.recordInvocation("ResumePruning", []interface{}{})
	fake.resumePruningMutex.Unlock()
	if fake.ResumePruningStub != nil {
		fake.ResumePruningStub()
	}
}

func (fake *AddressTable) ResumePruningCallCount() int {
	fake.resumePruningMutex.RLock()
	defer fake.resumePruningMutex.RUnlock()
	return len(fake.resumePruningArgsForCall)
}

func (fake *AddressTable) SetWarm() {
	fake.setWarmMutex.Lock()
	fake.setWarmArgsForCall = append(fake.setWarmArgsForCall, struct{}{})
	fake.recordInvocation("SetWarm", []interface{}{})
	fake.setWarmMutex.Unlock()
	if fake.SetWarmStub != nil {
		fake.SetWarmStub()
	}
}

func (fake *AddressTable) SetWarmCallCount() int {
	fake.setWarmMutex.RLock()
	defer fake.setWarmMutex.RUnlock()
	return len(fake.setWarmArgsForCall)
}

func (fake *AddressTable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	fake.pausePruningMutex.RLock()
	defer fake.pausePruningMutex.RUnlock()
	fake.resumePruningMutex.RLock()
	defer fake.resumePruningMutex.RUnlock()
	fake.setWarmMutex.RLock()
	defer fake.setWarmMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AddressTable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mbus.AddressTable = new(AddressTable)
