// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"service-discovery-controller/mbus"
	"sync"
)

type AddressTable struct {
	AddStub        func(hostnames []string, ip string)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		hostnames []string
		ip        string
	}
	RemoveStub        func(hostnames []string)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		hostnames []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AddressTable) Add(hostnames []string, ip string) {
	var hostnamesCopy []string
	if hostnames != nil {
		hostnamesCopy = make([]string, len(hostnames))
		copy(hostnamesCopy, hostnames)
	}
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		hostnames []string
		ip        string
	}{hostnamesCopy, ip})
	fake.recordInvocation("Add", []interface{}{hostnamesCopy, ip})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(hostnames, ip)
	}
}

func (fake *AddressTable) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *AddressTable) AddArgsForCall(i int) ([]string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].hostnames, fake.addArgsForCall[i].ip
}

func (fake *AddressTable) Remove(hostnames []string) {
	var hostnamesCopy []string
	if hostnames != nil {
		hostnamesCopy = make([]string, len(hostnames))
		copy(hostnamesCopy, hostnames)
	}
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		hostnames []string
	}{hostnamesCopy})
	fake.recordInvocation("Remove", []interface{}{hostnamesCopy})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		fake.RemoveStub(hostnames)
	}
}

func (fake *AddressTable) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *AddressTable) RemoveArgsForCall(i int) []string {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].hostnames
}

func (fake *AddressTable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AddressTable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mbus.AddressTable = new(AddressTable)
