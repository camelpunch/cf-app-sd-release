// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"service-discovery-controller/mbus"
	"sync"
)

type LocalIP struct {
	LocalIPStub        func() (string, error)
	localIPMutex       sync.RWMutex
	localIPArgsForCall []struct{}
	localIPReturns     struct {
		result1 string
		result2 error
	}
	localIPReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LocalIP) LocalIP() (string, error) {
	fake.localIPMutex.Lock()
	ret, specificReturn := fake.localIPReturnsOnCall[len(fake.localIPArgsForCall)]
	fake.localIPArgsForCall = append(fake.localIPArgsForCall, struct{}{})
	fake.recordInvocation("LocalIP", []interface{}{})
	fake.localIPMutex.Unlock()
	if fake.LocalIPStub != nil {
		return fake.LocalIPStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.localIPReturns.result1, fake.localIPReturns.result2
}

func (fake *LocalIP) LocalIPCallCount() int {
	fake.localIPMutex.RLock()
	defer fake.localIPMutex.RUnlock()
	return len(fake.localIPArgsForCall)
}

func (fake *LocalIP) LocalIPReturns(result1 string, result2 error) {
	fake.LocalIPStub = nil
	fake.localIPReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *LocalIP) LocalIPReturnsOnCall(i int, result1 string, result2 error) {
	fake.LocalIPStub = nil
	if fake.localIPReturnsOnCall == nil {
		fake.localIPReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.localIPReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *LocalIP) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.localIPMutex.RLock()
	defer fake.localIPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LocalIP) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mbus.LocalIP = new(LocalIP)
